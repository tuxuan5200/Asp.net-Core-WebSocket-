@{
    ViewData["Title"] = "交友聊天室-相见即是缘";
}

<style>
    * {
        box-sizing: border-box;
        font-family: "微软雅黑"
    }

    input[type="text"] {
        display: inline-block;
        width: 190px;
        height: 35px;
        padding: 6px 12px;
        font-size: 14px;
        line-height: 1.42857143;
        color: #555;
        background-color: #fff;
        background-image: none;
        border: 1px solid #ccc;
        border-radius: 4px;
        -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
        -webkit-transition: border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;
        -o-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
        transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
    }

    button {
        display: inline-block;
        padding: 6px 12px;
        margin-bottom: 0;
        font-size: 14px;
        font-weight: 400;
        line-height: 1.42857143;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        -ms-touch-action: manipulation;
        touch-action: manipulation;
        cursor: pointer;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
        background-image: none;
        border: 1px solid transparent;
        border-radius: 4px;
        color: #333;
        background-color: #fff;
        border-color: #ccc;
        width: 90px;
    }

        button:hover {
            color: #333;
            background-color: #e6e6e6;
            border-color: #adadad;
        }

    .displayNone {
        display: none;
    }

    .msgBlockContent {
        padding-top: 4px;
        color: #000000;
    }

    .msgBlockTime {
        padding-top: 10px;
        color: #0094ff;
        font-size: 15px;
    }

    .msgBlockInfo {
        padding-top: 8px;
        color: #ff0000;
    }

    .divContent {
        width: 500px;
        height: 900px;
        padding: 15px;
        background-color: #F7F7F9;
        background-image: url('/images/background.png');
        background-size: cover;
    }



    .divContent {
        margin: 10px auto;
        margin-top: 10px;
        width: 500px;
        height: 900px;
        padding: 15px;
        background-color: #F7F7F9;
        background-image: url('/images/background.png');
        background-size: cover;
    }

    #output {
        overflow-y: auto;
        margin: 0px auto;
        margin-top: 120px;
        margin-bottom: 10px;
        width: 400px;
        height: 595px;
        padding: 15px;
        padding-top: 0px;
    }

    .me {
        color: #ff6a00;
        font-size: 18px;
    }
    /*PC*/
    @@media (min-width: 992px) {
        .login, .logout {
            margin: 1px auto;
            padding-left: 40px;
        }
    }
    /*手机端*/
    @@media screen and (max-width: 992px) {
        .hiLabel {
            display: none;
        }

        .divContent {
            height: 660px;
            width: 380px;
            background-image: url('/images/background.png');
            background-size: cover;
        }

        #output {
            margin-top: 80px;
            height: 450px;
            padding-top: 5px;
            padding-left: 33px;
            overflow-y: auto;
        }

        .login, .logout {
            margin: 1px auto;
            padding-left: 25px;
        }

        input[type="text"] {
            width: 100px;
        }

        .msgBlockInfo {
            width: 295px;
        }
    }
</style>

<div class="divContent">

    <div class="hiLabel" style="position:fixed;top:50px;left:100px;max-width:200px;max-height:400px;">
        <div>
            <a target="_blank" href="http://haojima.net">
                <img src="~/images/留言.png" title="留言板" />
            </a>
        </div>

        <div style="margin-top:10px;">
            <a target="_blank" href="https://github.com/zhaopeiym/ChatRoom">
                <img src="~/images/github.jpg" title="源码" />
            </a>
        </div>

        <div style="margin-top:10px;text-align:center;color:#808080;font-size:10px">
            阿里云 + .NET Core2.0 + WebSocket + CentOS7.3 + nginx1.12.1
        </div>
    </div>

    <div id="output"></div>

    <div class="login" style="">
        <input type="text" class="userName" placeholder="撩妹得有个帅气的名字~~" style="margin-right:5px;" />
        MM<input type="radio" name="sex" checked value="女" />GG<input type="radio" name="sex" value="男" />
        <button class="btnLogin" onclick="doConnect()">登录</button>
    </div>

    <div class="logout displayNone">
        <button onclick="doDisconnect()">下线</button>
        <span style="margin-right:10px;"></span>
        <input type="text" id="sendInput" maxlength="200" placeholder="开启撩妹技能~~" />
        <button onclick="doSendInput()">发送</button>
    </div>
</div>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/moment/moment.js"></script>
<script type="text/javascript">

    $(function () {
        var historicalMessg = @Html.Raw(@ViewBag.HistoricalMessg);
        for (var i = 0; i < historicalMessg.length; i++) {
            write(historicalMessg[i]);
        }
        write({ "info": "聊天室热词 #约吗# #么么哒# #撩妹# #懵逼#" });
    });


    var HtmlUtil = {
        /*1.用浏览器内部转换器实现html转码*/
        htmlEncode: function (html) {
            //1.首先动态创建一个容器标签元素，如DIV
            var temp = document.createElement("div");
            //2.然后将要转换的字符串设置为这个元素的innerText(ie支持)或者textContent(火狐，google支持)
            (temp.textContent != undefined) ? (temp.textContent = html) : (temp.innerText = html);
            //3.最后返回这个元素的innerHTML，即得到经过HTML编码转换的字符串了
            var output = temp.innerHTML;
            temp = null;
            return output;

        },
        /*2.用浏览器内部转换器实现html解码*/
        htmlDecode: function (text) {
            //1.首先动态创建一个容器标签元素，如DIV
            var temp = document.createElement("div");
            //2.然后将要转换的字符串设置为这个元素的innerHTML(ie，火狐，google都支持)
            temp.innerHTML = text;
            //3.最后返回这个元素的innerText(ie支持)或者textContent(火狐，google支持)，即得到经过HTML解码的字符串了。
            var output = temp.innerText || temp.textContent;
            temp = null;
            return output;

        }
    };

    var socket = null;
    //服务器
    var ws = location.protocol === "https" ? "wss" : "ws";// https 对应修改 wss
    var uri = ws + "://" + window.location.host + "/ws";

    //输入
    function write(data, eleClass) {
        var $output = $("#output");

        //系统消息
        if (data.info) {
            $output.append("<div class='msgBlockInfo'>【系统】" + data.info + "</div>");
            $output.scrollTop($output[0].scrollHeight);
            return;
        }

        if (data.time) {
            $output.append("<div class='msgBlockTime'>" + moment(data.time).format("YYYY-MM-DD HH:mm:ss"), + "</div>");
        }
        var sex = data.sex === "男" ? "♂" : "♀";
        $output.append("<div class='msgBlockContent'><span class=" + eleClass + ">" + HtmlUtil.htmlEncode(data.name) + "(" + sex + ")：</span><span class='msgContent'>" + HtmlUtil.htmlEncode(data.content) + "</span></div>");
        $output.scrollTop($output[0].scrollHeight);
    }

    var time = null;
    var timedCount = function () {
        if (socket.readyState === 1)//1 - 表示连接已建立，可以进行通信。
            socket.send("heartbeat");
        time = setTimeout(timedCount, 58 * 1000); //58秒发一次心跳
    }

    //登录上下（连接）
    function doConnect() {

        var userName = HtmlUtil.htmlEncode($(".userName").val());
        if (!userName) {
            write({ "info": "撩妹得有个帅气的名字~~啊" });
            return;
        }
        $(".btnLogin").prop("disabled", true)
            .css("background-color", "#BFBFBF")
            .text("登录中...");

        if (socket === null || socket.readyState != 1) {//1 - 表示连接已建立，可以进行通信。
            socket = new WebSocket(uri + "?userName=" + userName);
            timedCount();
        }

        //连接建立时触发
        socket.onopen = function (e) {
            $(".logout").removeClass("displayNone");
            $(".login").addClass("displayNone");
        };
        //连接关闭时触发
        socket.onclose = function (e) {
            if (e.code === 1008) {
                write({ "info": userName + "，您已被迫下线。 " + e.reason });
            }
            else
                write({ "info": userName + "，您已下线" });

            $(".logout").addClass("displayNone");
            $(".login").removeClass("displayNone");
            $(".btnLogin").prop("disabled", false)
                .css("background-color", "#fff")
                .text("登录");
            socket = null;
            clearTimeout(time);
        };
        //客户端接收服务端数据时触发
        socket.onmessage = function (e) {
            var chat = JSON.parse(e.data);
            write(chat);
        };
        //通信发生错误时触发
        socket.onerror = function (e) {
            if (e.data)
                write({ "info": "异常: " + e.data });
        };
    }

    //回车发送消息
    $("#sendInput").keydown(function (e) {
        if (e.keyCode === 13) {
            doSendInput();
        }
    });

    //回车登录
    $(".userName").keydown(function (e) {
        if (e.keyCode === 13) {
            doConnect();
        }
    });

    //发送消息
    function doSendInput() {
        if (!$("#sendInput").val()) {
            return;
        }
        if (socket == null) {
            write({ "info": "您还没有登录！" });
            return;
        }
        var chat = {
            "content": $("#sendInput").val() || "抖一下~~",
            "time": new Date(),
            "name": $(".userName").val() || "匿名",
            "sex": $(":radio:checked").val(),
        };
        socket.send(JSON.stringify(chat));
        write(chat, "me");
        $("#sendInput").val("");
    }

    //下线（关闭连接）
    function doDisconnect() {
        socket.close();
    }
</script>


